name: CI

on: [push, pull_request]

jobs:

  code-quality:
    name: Check coding standards
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          cache: poetry

      - name: Install dependencies
        run: poetry install

      - name: Check code formatting
        run: echo poe format #poetry run poe format

  # run-tests:
  #   name: Run tests
  #   strategy:
  #     matrix:
  #       os: [Ubuntu, MacOS, Windows]
  #       python-version: ['3.9', '3.10', '3.11', '3.12']

  #   runs-on: ${{ matrix.os }}-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install poetry
  #       run: pipx install poetry

  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: poetry

  #     - name: Install dependencies
  #       run: poetry install

  #     - name: Run tests
  #       run: poetry run poe test

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    # needs: [code-quality, run-tests]
    needs: [code-quality]
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Build package
        run: poetry build

      - name: Store the distribution packages
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  pypi-publish:
    name: Upload release to PyPI
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/trackc
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore and upload them to GitHub Release
    needs: [pypi-publish]
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'